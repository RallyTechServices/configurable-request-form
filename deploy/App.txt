<!DOCTYPE html>
<html>
<head>
    <title>Configurable Request Form</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Aug 21 2015 13:18:58 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Aug 21 2015 13:18:58 GMT-0600 (MDT)";
        var CHECKSUM = 49879960758;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.AttachmentEditor',{
    extend: 'Ext.panel.Panel',
    alias: 'widget.tsattachmentgrid',
    height: 200,
    width: '100%',
    record: undefined,

    constructor: function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    initComponent: function(){
        this.callParent(arguments);

        this._store = Ext.create('Ext.data.Store',{
            fields: ['filename'],
            data: []
        });

        this.add({
            xtype: 'rallygrid',
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            store: this._store,
            emptyText: 'No Attachments',
            hideHeaders: true
        });

        this.add({
            xtype: 'filebutton',
            text: 'Upload',
            margin: 10,
            cls: 'secondary rly-small',
            listeners: {
                change: this.addFile,
                scope: this

            }
        });


    },
    addFile: function(button, e, value){
         //var reader = new FileReader();
        //reader.readAsBinaryString(value, "UTF-8");
        //reader.onload = function (evt) {
        //    console.log('onload', evt.target.result);
        this._store.add({filename: value, name: '', description: '', content: ''});
        //}
        //reader.onerror = function (evt) {
        //    console.log('onload', evt.target.result);
        //}

    },
    removeFile: function(grid, rowIndex, colIndex) {
        var rec = grid.getStore().getAt(rowIndex);
        this._store.remove(rec);
    },
    _getColumnCfgs: function(){
        var me = this;
        return [{
            xtype:'actioncolumn',
            width:40,
            items: [{
                icon: '/slm/js-lib/rui/builds/rui/resources/css/images/trash-icon.png',
                tooltip: 'Remove file',
                scope: me,
                handler: me.removeFile
            }]
        },{
            dataIndex: 'filename',
            text: 'File',
            flex: 1,
            renderer: function(v,m,r){
                return v;
            }
        },{
            dataIndex: 'name',
            text: 'Name'
        },{
            dataIndex: 'description',
            text: 'Description'
        }];
    },
    getValue: function(){
        return this._store.data.items;
    }

});

(function () {
    var Ext = window.Ext4 || window.Ext;

    var userSearchComboBox = function(field, record, initToContextUser) {
        var project = Rally.data.util.Record.getProject(record);
        var currentUser = record.get(field.name);
        if (_.isObject(currentUser)) {
            currentUser = currentUser._ref;
        }
        if (initToContextUser && record.phantom && !currentUser) {
            currentUser = Rally.environment.getContext().getUser()._ref;
            record.set(field.name, currentUser);
        }

        return Ext.create('Rally.ui.combobox.UserSearchComboBox', {
            project: project,
            name: field.name,
            value: currentUser,
            bubbleEvents: ['select'],
            triggerWrapCls: 'fullwidth',
            plugins: [
                {
                    xclass: 'Rally.ui.detail.plugins.LoadingMonitor'
                }
            ]
        });
    };

    var buildNumberField = function(field, record) {
        var value = Number(record.get(field.name)) || 0;
        return Ext.create('Rally.ui.NumberField', {
            name: field.name,
            displayName: field.displayName,
            value: value,
            labelAlign: 'right',
            height: getDefaultHeight(),
            field: field,
            hideTrigger: true,
            clientMetrics: {
                event: 'blur',
                description: 'field blur'
            }
        });
    };

    var buildPercentDoneBy = function(percentDoneTemplateName, field, record) {
        var tpl = Ext.create(percentDoneTemplateName);
        return Ext.create('Ext.Component', {
            data: record.data,
            tpl: tpl,
            maskOnDisable: false,
            cls: 'percent-done',
            listeners: {
                afterrender: function() {
                    var el = this.getEl();
                    el.on('click', function() {
                        Ext.create('Rally.ui.popover.PercentDonePopover', {
                            target: el,
                            percentDoneData: Ext.applyIf({
                                Notes: "",                                      // Empty string so that NOTES section will not display
                                Release: record.get('Release') || {},           // Avoid fetching release
                                PortfolioItemTypeOrdinal: record.self.ordinal   // Ditto
                            }, record.data),
                            percentDoneName: field.name
                        });
                    });
                }
            }
        });
    };

    var buildDisplayColorField = function (field, record) {
        return Ext.create('Rally.ui.detail.view.DisplayColorField', {
            field: field,
            record: record,
            editable: Rally.ui.detail.DetailHelper.isDetailPageFieldEditable(field, record)
        });
    };

    var buildStateField = function (field, record) {
        return Ext.create('Rally.ui.detail.view.StateField', {
            field: field,
            record: record
        });
    };

    var buildTargetProjectEditor = function(field, record) {
        var project = record.get(field.name);
        if (record.phantom && project === "") {
            project = Rally.environment.getContext().getProject();
        }
        return Ext.create('Rally.ui.detail.view.TargetProjectField', {
            name: field.name,
            milestoneRecord: record,
            value: Rally.util.Ref.getRelativeUri(project),
            editable: Rally.ui.MilestoneTargetProjectPermissionsHelper.canEdit(record)
        });
    };

    var defaultAllowNoEntry = function(field, record) {
        return !field.required || !record.get(field.name);
    };

    function constrainedComboBox(field, record, config) {
        return Ext.widget(Ext.apply({
            xtype: 'rallyfieldvaluecombobox',
            name: field.name,
            value: record.get(field.name),
            field: field,
            labelAlign: 'right',
            labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
            labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
            width: '75%',
            minWidth: 200,
            editable: false,
            allowNoEntry: defaultAllowNoEntry(field, record),
            useNullForNoEntryValue: true,
            plugins: [
                {
                    xclass: 'Rally.ui.detail.plugins.LoadingMonitor'
                }
            ]
        }, config));
    }

    function milestoneField(field, record, readOnly) {
        return Ext.create('Rally.ui.detail.view.MilestonesField', {
            field: field,
            record: record,
            readOnly: readOnly
        });
    }
    function getDefaultHeight(){
        return 25;
    }

    /**
     * @private
     */
    Ext.define('Rally.technicalservices.DetailEditorFactory', {
        requires: [
            'Rally.data.util.Record',
            'Rally.data.wsapi.Filter',
            'Rally.ui.combobox.FieldValueComboBox',
            'Rally.ui.detail.DetailHelper',
            'Rally.ui.detail.view.DetailWebLinkField',
            'Rally.ui.detail.view.DetailNumberField',
            'Rally.ui.detail.view.StateField',
            'Rally.ui.detail.view.DetailReadOnlyRefreshingField',
            'Rally.ui.detail.view.ReadyButton',
            'Rally.ui.renderer.template.progressbar.PercentDoneByStoryCountTemplate',
            'Rally.ui.renderer.template.progressbar.PercentDoneByStoryPlanEstimateTemplate',
            'Rally.ui.popover.PercentDonePopover',
            'Rally.ui.detail.view.MilestonesField',
            'Rally.util.Ref',
            'Rally.ui.combobox.ProjectComboBox'
        ],

        singleton: true,

        labelWidth: 150,
        labelCls: 'tslabel',
        controlWidth: '90%',
        padding: 0,

        getEditor: function (field, record, item_id, margin, field_label) {
            var editor;
            if (this.fieldEditors[field.name]) {
                editor = this.fieldEditors[field.name](field, record);
            } else if (field.attributeDefinition && this.typeEditors[field.attributeDefinition.AttributeType.toLowerCase()]) {
                editor = this.getEditorByType(field, record);
            } else {
                editor = this.defaultRenderer(field, record);
            }

            editor.addCls('detailFieldEditor');
            editor.itemId = item_id;
            editor.fieldLabel = field_label;
            editor.margin = margin;
            editor.labelAlign = 'right';

            return editor;
        },

        getEditorByType: function (field, record) {
            return this.typeEditors[field.attributeDefinition.AttributeType.toLowerCase()](field, record);
        },

        defaultRenderer: function (field, record) {
            return this.typeEditors['string'](field, record);
        },

        fieldEditors: {

            Attachments: function(field, record){
                return Ext.create('Rally.technicalservices.AttachmentEditor',{
                    record: record,
                    title: field.displayName
                });
            },

            Iteration: function (field, record) {
                var currentIteration = record.get(field.name);
                return Ext.create('Rally.ui.combobox.IterationComboBox', {
                    name: field.name,
                    value: currentIteration,
                    allowNoEntry: defaultAllowNoEntry(field, record),
                    showArrows: false,
                    defaultSelectionToFirst: true,
                    defaultToCurrentTimebox: false,
                    labelAlign: 'right',
                    storeConfig: {
                        remoteFilter: true,
                        filters: [
                            buildTimeboxFilter(currentIteration)
                        ],
                        context: {
                            project: Rally.data.util.Record.getProject(record),
                            projectScopeUp: false,
                            projectScopeDown: false
                        }
                    },
                    plugins: [
                        {
                            xclass: 'Rally.ui.detail.plugins.LoadingMonitor'
                        }
                    ]
                });
            },

            Milestones: function(field, record) {
                var readOnly = !Rally.ui.detail.DetailHelper.isDetailPageFieldEditable(field, record);
                return milestoneField(field, record, readOnly);
            },

            Owner: function(field, record) {
                return userSearchComboBox(field, record, record.isUserStory());
            },

            Release: function (field, record) {
                var currentRelease = record.get(field.name);
                return Ext.create('Rally.ui.combobox.ReleaseComboBox', {
                    name: field.name,
                    value: currentRelease,
                    allowNoEntry: defaultAllowNoEntry(field, record),
                    showArrows: false,
                    defaultSelectionPosition: 'first',
                    defaultToCurrentTimebox: false,
                    labelAlign: 'right',
                    storeConfig: {
                        remoteFilter: true,
                        filters: [
                            buildTimeboxFilter(currentRelease)
                        ],
                        context: {
                            project: Rally.data.util.Record.getProject(record),
                            projectScopeUp: false,
                            projectScopeDown: false
                        }
                    },
                    plugins: [
                        {
                            xclass: 'Rally.ui.detail.plugins.LoadingMonitor'
                        }
                    ]
                });
            },
        },

        typeEditors: {

            'boolean': function (field, record) {
                var choices = Ext.create('Ext.data.Store', {
                    fields: ['value', 'display'],
                    data: [
                        {value: true, display: 'Yes'},
                        {value: false, display: 'No'}
                    ]
                });

                return Ext.create('Rally.ui.combobox.ComboBox', {
                    name: field.displayName,
                    store: choices,
                    queryMode: 'local',
                    displayField: 'display',
                    valueField: 'value',
                    width: '25%',
                    minWidth: 200,
                    labelAlign: 'right',
                    labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                    labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                    value: record.get(field.name),
                    defaultSelectionPosition: 'last'
                });
            },
            date: function (field, record) {

                return Ext.create('Rally.ui.DateField', {
                    format: Rally.util.DateTime.getUserExtDateFormat(),
                    validateOnChange: false,
                    name: field.displayName,
                    value: record.get(field.name),
                    width: '25%',
                    minWidth: 200,
                    labelAlign: 'right',
                    labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                    labelCls: Rally.technicalservices.DetailEditorFactory.labelCls
                });
            },
            'decimal': function (field, record) {
                var value = Number(record.get(field.name)) || 0;
                return Ext.create('Rally.ui.NumberField', {
                    name: field.displayName,
                    displayName: field.displayName,
                    value: value,
                    labelAlign: 'right',
                    height: getDefaultHeight(),
                    field: field,
                    hideTrigger: true,
                    width: '25%',
                    labelSeparator: "",
                    minWidth: 200,
                    labelAlign: 'right',
                    labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                    labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                    padding: Rally.technicalservices.DetailEditorFactory.padding
                });
            },
            'integer': function (field, record) {

                var value = Number(record.get(field.name)) || 0;
                return Ext.create('Rally.ui.NumberField', {
                    name: field.displayName,
                    displayName: field.displayName,
                    value: value,
                    labelAlign: 'right',
                    height: getDefaultHeight(),
                    field: field,
                    hideTrigger: true,
                    width: '25%',
                    labelSeparator: "",
                    minWidth: 200,
                    labelAlign: 'right',
                    labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                    labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                    padding: Rally.technicalservices.DetailEditorFactory.padding
                });

            },
            'object': function (field, record) {
                if (field.attributeDefinition.Constrained) {
                    return Ext.create('Rally.ui.combobox.ComboBox', {
                        name: field.displayName,
                        value: record.get(field.name),
                        editable: false,
                        labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                        labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                        labelAlign: 'right',
                        storeConfig: {
                            autoLoad: true,
                            model: field.attributeDefinition.SchemaType,
                            initialValue: record.get(field.name) ? record.get(field.name)._refObjectName : ''
                        },
                        allowNoEntry: defaultAllowNoEntry(field, record)
                    });

                } else {
                    return Ext.create('Rally.ui.TextField', {
                        name: field.displayName,
                        value: record.get(field.name),
                        labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                        labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                        padding: Rally.technicalservices.DetailEditorFactory.padding,
                        labelAlign: 'right'

                    });
                }
            },
            quantity: function (field, record) {
                var value = Number(record.get(field.name)) || 0;
                return Ext.create('Rally.ui.NumberField', {
                    name: field.displayName,
                    displayName: field.displayName,
                    value: value,
                    labelAlign: 'right',
                    height: getDefaultHeight(),
                    field: field,
                    width: '25%',
                    labelSeparator: "",
                    minWidth: 200,
                    labelAlign: 'right',
                    labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                    labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                    padding: Rally.technicalservices.DetailEditorFactory.padding
                });
            },
            rating: function (field, record) {
                if (field.attributeDefinition.Constrained) {
                    return constrainedComboBox(field, record, {
                        allowNoEntry: !field.required || record.get(field.name) === 'None',
                        ratingNoEntryString: '-- No Entry --',
                        noEntryValue: 'None',
                        labelAlign: 'right',
                        useNullForNoEntryValue: false
                    });
                } else {
                    return Ext.create('Rally.ui.TextField', {
                        name: field.displayName,
                        value: record.get(field.name),
                        width: '25%',
                        minWidth: 200,
                        labelAlign: 'right',
                        labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                        labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                        padding: Rally.technicalservices.DetailEditorFactory.padding
                    });
                }
            },
            string: function (field, record) {
                if (field.attributeDefinition.Constrained) {
                    return constrainedComboBox(field, record);
                } else {
                    return Ext.create('Rally.ui.TextField', {
                        name: field.name,
                        value: record.get(field.name),
                        height: getDefaultHeight(),
                        minWidth: 200,
                        labelSeparator: "",
                        labelWidth: Rally.technicalservices.DetailEditorFactory.labelWidth,
                        labelCls: Rally.technicalservices.DetailEditorFactory.labelCls,
                        width: Rally.technicalservices.DetailEditorFactory.controlWidth,
                        padding: Rally.technicalservices.DetailEditorFactory.padding
                    });
                }
            },
            text: function (field, record) {
                var isEditable = Rally.ui.detail.DetailHelper.isDetailPageFieldEditable(field, record),
                    editor;

                if (isEditable) {
                    editor = Ext.create('Rally.technicalservices.RichTextEditor',{
                        field: field,
                        record: record,
                        labelAlign: 'right',
                        padding: Rally.technicalservices.DetailEditorFactory.padding
                    });
                } else {
                    editor = Ext.create('Rally.ui.richtext.RichTextEditorReadOnly', {
                        html: record.get(field.name)
                    });
                }

                if (Rally.ui.detail.DetailHelper.getController()) {
                    Rally.ui.detail.DetailHelper.getController().on('recordupdate', function(record) {
                        editor.setValue(record.get(field.name));
                    });
                }

                return editor;
            },
            web_link: function (field, record) {
                return Ext.create('Rally.ui.detail.view.DetailWebLinkField', {
                    field: field,
                    record: record
                });
            }
        }
    });

})();
Ext.define('Rally.technicalservices.RichTextEditor', {
    extend: 'Ext.Container',
    layout: {type: 'hbox'},
    width: Rally.technicalservices.DetailEditorFactory.controlWidth,
    alias: 'widget.tsrichtexteditor',
    height: 200,

    constructor: function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function(){
        this.callParent(arguments);

        var record = this.record,
            field = this.field;

        this.add({
            xtype: 'container',
            html: Ext.String.format('<div class="tslabel">{0}</div>',field.name),
            width: Rally.technicalservices.DetailEditorFactory.labelWidth,
            padding: 5
        });
        var editor = Ext.create('Rally.ui.richtext.RichTextEditor', {
                field: field,
                record: record,
                title: field.name,
                itemId: 'rt-editor',
                margin: 5,
                name: field.name,
                value: record.get(field.name),
                growToFitContent: true,
                allowImageUpload: true,
                renderTpl: '<div class="richTextToolbar"></div><div class="richTextContent"></div>',
                EDITOR_MIN_HEIGHT: 110,
                toolbarAlwaysEnabled: false,
                showUndoButton: true,
                disableUndoButtonWithToolbar: false,
                indicatorFoldUnder: true,
                useLinkBubble: true,
                flex: 1,
                listeners: {
                    focus: function () {
                        var focusedField = Ext.ComponentQuery.query('rallydetailfieldcontaineredpcomplete[focused=true]')[0];

                        if (focusedField) {
                            var editor = focusedField.editor;
                            if (editor !== this) {
                                focusedField.clearSelection();
                                editor.hasFocus = false;
                                editor.fireEvent('blur');
                                if (editor.collapse) {
                                    editor.collapse();
                                }
                            }
                        }
                    },
                    blur: function () {
                        var fields = Ext.ComponentQuery.query('rallydetailfieldcontaineredpcomplete');
                        var previouslyFocusedField = _.find(fields, function (field) {
                            if (field.editor) {
                                return field.editor.hasFocus;
                            }
                        }, this);
                        if (previouslyFocusedField) {
                            previouslyFocusedField.focusField();
                        }
                    },
                    imageuploaded: function(imageInfo) {
                        var controller = Rally.ui.detail.DetailHelper.getController();
                        if(controller) {
                            controller._handleImageUpload(imageInfo);
                        }
                    }
                }
            });

        editor.on('boxready', this._resize, this);
        if (Rally.ui.detail.DetailHelper.getController()) {
            Rally.ui.detail.DetailHelper.getController().on('recordupdate', function(record) {
                editor.setValue(record.get(field.name));
            });
        }
        this.add(editor);
    },
    _resize: function(){
        this.down('#rt-editor').setHeight(this.height);
    },
    getValue: function(){
        return this.down('#rt-editor').getValue();
    },
    validator: function(value){
        return true;
    },
    validate: function(){
        var validation = this.validator(this.down('#rt-editor').getValue());
        if (validation === true){
            return true;
        }
        Ext.create('Rally.ui.tooltip.ToolTip', {
            target : this.down('#rt-editor').getEl(),
            html: '<div class="tsinvalid">' + validation + '</div>',
            autoShow: true,
            destroyAfterHide: true
        });
        return false;
    }
});

Ext.define('Rally.technicalservices.BooleanFieldComboBox',{
    extend: 'Rally.ui.combobox.FieldComboBox',
    alias: 'widget.tsbooleanfieldcombobox',

    _isNotHidden: function(field) {
        return (!field.hidden && field.attributeDefinition && field.attributeDefinition.AttributeType == 'BOOLEAN');
    }
});

Ext.define('Rally.technicalservices.settings.FormConfiguration',{
    extend: 'Ext.form.field.Base',
    alias: 'widget.tsformconfigsettings',
    config: {
        value: undefined,
        fields: undefined,
        decodedValue: {}
    },
    notAllowedFields: ['ScheduleState','Tags','PredecessorsAndSuccessors','Predecessors','Successors','Project','Milestones','Workspace','Changesets','Parent','PortfolioItem','DisplayColor'],
    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: '100%',
    cls: 'column-settings',

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        var decodedValue = {};
        if (this.value && !_.isEmpty(this.value)){
            decodedValue = Ext.JSON.decode(this.value);
        }
        this.callParent(arguments);

        var data = [];

        _.each(this.fields, function(f){
            if (this._isFieldAllowed(f)){
                var dsp = false,
                    def_value = f.defaultValue || '',
                    req = f.required || false,
                    order = null;

                if (decodedValue[f.name]){
                    dsp = true;
                    def_value = decodedValue[f.name].defaultValue;
                    req = decodedValue[f.name].required;
                    order = order;
                }
                data.push({fieldName: f.name, displayName: f.displayName, display: dsp, defaultValue: def_value, required: req})
            }
        }, this);

        data = _.sortBy(data, 'order');
        this._store = Ext.create('Ext.data.Store', {
            fields: ['fieldName', 'displayName','display', 'defaultValue', 'required','order'],
            data: data
        });

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            store: this._store,
            height: 400,
            editingConfig: {
                publishMessages: false
            },
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragText: 'Drag and drop to reorder'
                }
            }
        });
    },
    _isFieldAllowed: function(field){
        var forbiddenTypes = ['WEB_LINK'];

        if (Ext.Array.contains(this.notAllowedFields, field.name)){
            return false;
        }

        if (field.readOnly === true || field.hidden === true){
            return false;
        }

        if (field && !field.attributeDefinition){
            return false;
        }

        //Not showing Weblinks for now
        if (Ext.Array.contains(forbiddenTypes, field.attributeDefinition.AttributeType)){
            return false;
        }

        return true;
    },
    _getColumnCfgs: function() {
        var columns = [
            {
                text: 'Field',
                dataIndex: 'displayName',
                flex: 1
            },
            {
                text: 'Show',
                dataIndex: 'display',
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            },
            {
                text: 'Required',
                dataIndex: 'required',
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            },
            {
                text: 'Default Value',
                dataIndex: 'defaultValue',
                emptyCellText: '',
                flex: 3,
                editor: {
                    xtype: 'rallytextfield'
                }
            }
        ];
        return columns;
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },
    _buildSettingValue: function() {
        var mappings = {},
            order = 1;
        this._store.each(function(record) {
            if (record.get('display')) {
                mappings[record.get('fieldName')] = {
                    required: record.get('required'),
                    defaultValue: record.get('defaultValue'),
                    order: order++
                };
            }
        }, this);
        return mappings;
    },

    getErrors: function() {
        var errors = [];
        if (_.isEmpty(this._buildSettingValue())) {
           errors.push('At least one field must be shown.');
        }
        return errors;
    },
    validate : function() {
        var me = this,
            isValid = me.isValid();
        if (isValid !== me.wasValid) {
            me.wasValid = isValid;
            me.fireEvent('validitychange', me, isValid);
        }
        if (!isValid){
            var html = this.getErrors().join('<br/>');
            Ext.create('Rally.ui.tooltip.ToolTip', {
                target : this.getEl(),
                html: '<div class="tsinvalid">' + html + '</div>',
                autoShow: true,
                anchor: 'bottom',
                destroyAfterHide: true
            });

        }

        return isValid;
    },
    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    }
});

Ext.define('Rally.technicalservices.RequestForm', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.tsrequestform',
    logger: new Rally.technicalservices.Logger(),

    layout: {
        type: 'vbox',       // Arrange child items vertically
        //type: 'table',
        //columns: 1,
        //padding: 10,
        //tableAttrs: {"class": "tstbl"},
        //trAttrs: {"class": "tstbl"}
    },

    config: {
        title: '',
        instructions: 'These are instructions for filling out this form',
        model: undefined,
        formConfiguration: undefined,
        thankYouMessage: "Thank you for your submission."
    },

    /**
     * Properties that are populated during the creation of this object
     */
    newRecord: null,

    constructor: function(config){
        this.mergeConfig(config);
        this.logger.log('constructor', config, this.config);
        this.callParent(arguments);
    },
    initComponent: function () {
        this.callParent();
        this.addEvents('save','ready','onwarning','onerror');
        this._build(this.model);
    },

    _build: function (model) {
        this.logger.log('_build', model);
        this.newRecord = this._getNewRecord(model);

        this._addInstructions(this.instructions);

        this._addFields(this.newRecord);

    },
    _addInstructions: function(){
        var title = this.add(Ext.create('Ext.container.Container',{
            tpl: '<tpl><div class="tsinstructions">{instructions}</div></tpl>'
        }));
        title.update(this);
    },

    _addFields: function(newRecord){
        var model = this.model;
        this.logger.log('_addFields', this.formConfiguration);
        if (!_.isEmpty(this.formConfiguration)){
            _.each(this.formConfiguration, function(field_obj, field_name){
                var model_field = model.getField(field_name);
                if (model_field){
                    var item_id = field_name,
                        margin = 10,
                        field_label = model_field.displayName;

                    var item = Rally.technicalservices.DetailEditorFactory.getEditor(model_field,newRecord,item_id, margin, field_label);
                    item.labelCls = "tslabel";
                    if (field_obj.required){
                        item.validator = function(value) {
                            if (Ext.isEmpty(value) || value == null || value == ''){
                                return Ext.String.format('{0} is required.', field_name);
                            }
                            return true;
                        }
                    }
                    item.msgTarget = 'side';
                    item.on('boxready', this._resize, this);
                    this.add(item);
                }
            }, this);
            this.doLayout();
            this.fireEvent('ready', this);
        } else {
            var msg = "No fields were loaded to display.  Please check the configuration settings to verify that fields are configured for this App."
            this.add({
                xtype: 'container',
                html: msg
            });
        }
    },
    _resize: function(cmp){
        this.logger.log('_resize');
        this.doLayout();
    },
    _getNewRecord: function(model){
        var newFields = {};
        Ext.each(this.formConfiguration, function(field_obj, field_name){
            this.logger.log(field_name, field_obj);
            if (field_obj.defaultValue){
                newFields[field_name].setValue(field_obj.defaultValue);
            }
        },this);
        this.logger.log('_getNewRecord', newFields);
        var rec = Ext.create(model, newFields);
        return rec;
    },

    _updateNewRecord: function(){
        var exceptionFields = ["Attachments"],
            valid = true;
        _.each(this.formConfiguration, function(field_obj, field_name){
            if (!Ext.Array.contains(exceptionFields, field_name)) {
                this.logger.log('_updateNewRecord', field_name, this.down('#' + field_name));

                var val = this.down('#' + field_name).getValue() || field_obj.defaultValue || null;
                valid = this.down('#' + field_name).validate();
                if (!valid) {
                    return false;
                }
                this.newRecord.set(field_name, val);

            }
        }, this);
        return valid;
    },
    save: function () {
        if (!this._updateNewRecord()){
            return false;
        };
        var attachments = null;
        if (this.down('#Attachments')){
            attachments = this.down('#Attachments').getValue() || null;
        }

        this.newRecord.save({
            scope: this,
            callback: function(result, operation) {
                if(operation.wasSuccessful()) {
                    if (attachments) {
                        this._updateAttachments(result, 'Attachments', attachments).then({
                            scope: this,
                            success: function(){
                                this.fireEvent('save', result);
                            },
                            failure: function(msg){

                            }
                        });
                    } else {
                        this.fireEvent('save',result);
                    }
                } else {
                    var msg = Ext.String.format("Submission could not be saved: {0}", operation.error.errors[0]);
                    this.fireEvent('onerror', {message: msg});
                }
            }
        });
    },
    _updateAttachments: function(record, field_name, val){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('_updateAttachments', record, field_name, val);
        deferred.resolve();
        //Rally.data.ModelFactory.getModel({
        //    type: 'Attachment',
        //    success: function(model) {
        //        _.each(val, function(a){
        //            var att = Ext.create(model, {});
        //        });
        //
        //    }
        //});
        //
        //
        //var record = Ext.create(model, {
        //    Name: 'Server crash',
        //    State: 'Open',
        //    Description: 'Worst defect ever'
        //});
        //The record can then be persisted to Rally using its save method:
        //
        //    record.save({
        //        callback: function(result, operation) {
        //            if(operation.wasSuccessful()) {
        //                //Get the new defect's objectId
        //                var objectId = result.get('ObjectID');
        //            }
        //        }
        //    });
        return deferred;
    }
});

Ext.define('Rally.technicalservices.WsapiToolbox',{
    singleton: true,

    fetchModel: function(model_name){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.wsapi.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                deferred.resolve(model);
            },
            failure: function(){
                deferred.reject('Error loading model: ' + model_name);
            }
        });
        return deferred.promise;
    }
});

Ext.define("configurable-request-form", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    config: {
        defaultSettings: {
            formFieldConfiguration: {},
            formModelName: 'HierarchicalRequirement'
        }
    },
    formModel: undefined,

    items: [

    ],
    
    launch: function() {
        Rally.technicalservices.WsapiToolbox.fetchModel(this.getSetting('formModelName')).then({
           scope: this,
           success: function(model){
               this.formModel = model;
               this._validateSettings(this.getSettings(), model);
           },
           failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: msg});
           }
       });
    },
    _validateSettings: function(settings, model){
        this.logger.log('_validateSettings settings', settings);
        var config_obj = settings.formFieldConfiguration;
        if (!Ext.isObject(config_obj)){
            config_obj = Ext.JSON.decode(settings.formFieldConfiguration);
        }

        this.logger.log('_validateSettings formFieldConfig', config_obj);
        if (_.isEmpty(config_obj)){
            this.add({
                xtype: 'container',
                itemId: 'display_box',
                flex: 1,
                html: 'No form configuration has been defined.<br/>Please use the App Settings to configure the form.',
                style: {
                    fontFamily: 'ProximaNovaLight, Helvetica, Arial'
                }
            });
        } else {
            this.formConfiguration = config_obj;
            this.model = model;
            this._showGrid(model);
        }
    },
    _buildForm: function(model, form_config){
        this.logger.log('_buildForm');

        this._clearWindow();

        this.add({xtype:'container',itemId:'display_box', flex: 1});
        this.add({xtype:'container',itemId:'button_box', flex: 1, layout: {type: 'hbox', pack: 'center'}});

        this.down('#display_box').add({
            xtype: 'tsrequestform',
            itemId: 'requestform',
            model: model,
            instructions: this.getSetting('formInstructions'),
            formConfiguration: form_config,
            listeners: {
                scope: this,
                save: this._onSaved,
                onwarning: this._onWarning,
                onerror: this._onError,
                ready: this._onReady
            }
        });
        this.down('#button_box').add({
            xtype:'rallybutton',
            text: 'Submit',
            itemId: 'btn-submit',
            style: {
                textAlign: 'center'
            },
            width: 75,
            scope: this,
            handler: this._save
        });
        this.down('#button_box').add({
            xtype:'rallybutton',
            text: 'Cancel',
            itemId: 'btn-cancel',
            style: {
                textAlign: 'center'
            },
            width: 75,
            scope: this,
            handler: this._cancel
        });

    },
    _save: function(){
        var requestForm = this.down('#requestform');
        requestForm.save();
    },
    _onSaved: function(newRecord){
        this.logger.log('_onSaved',newRecord);
        Rally.ui.notify.Notifier.showCreate({artifact: newRecord});
        this._showGrid(this.model);
    },
    _cancel: function(){
        this._showGrid(this.model);
    },
    _onWarning: function(obj){
        Rally.ui.notify.Notifier.showWarning(obj);
    },
    _onError: function(obj){
        Rally.ui.notify.Notifier.showError(obj);
    },
    _onReady: function(form){
        this.logger.log('_onReady', form);

        form.doLayout();
        form.setWidth('95%')
        this.down('#display_box').doLayout();
    },

    _clearWindow: function(){
        if (this.down('#story-grid')){
            this.down('#story-grid').destroy();
        }
        if (this.down('#display_box')){
            this.down('#display_box').destroy();
        }
        if (this.down('#button_box')){
            this.down('#button_box').destroy();
        }
    },
    _showGrid: function(model) {
        this._clearWindow();

        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: [model],
            autoLoad: true,
            enableHierarchy: true,
            sorters: [
                {
                    property: 'CreationDate',
                    direction: 'DESC'
                }
            ]
        }).then({
            scope: this,
            success: function(store){
                var modelNames = [model],
                    context = this.getContext();
                var gb = this.add({
                    xtype: 'rallygridboard',
                    context: context,
                    itemId: 'story-grid',
                    modelNames: modelNames,
                    toggleState: 'grid',
                    stateful: false,
                    plugins: [{
                            ptype: 'rallygridboardfieldpicker',
                            headerPosition: 'right',
                            modelNames: modelNames,
                            stateful: true,
                            stateId: context.getScopedStateId('columns-example')
                        }
                    ],
                    gridConfig: {
                        store: store,
                        columnCfgs: ['Name','ScheduleState']
                    },
                    height: this.getHeight()
                });
                var btn = gb.getHeader().getLeft().add({
                    xtype: 'rallybutton',
                    text: 'New Request',
                    margin: 5
                });
                btn.on({
                    click: this._onNewRequest,
                    scope: this
                });
            },
            scope: this
        });
    },

    _onNewRequest: function() {
        this.logger.log('_onNewRequest');
        this._buildForm(this.model, this.formConfiguration)
    },

    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    getSettingsFields: function() {
        var formModel = this.formModel;
        var fields = [];
        if (formModel){
            fields = formModel.getFields();
        }

        return [{
            name: 'formInstructions',
            xtype: 'textareafield',
            fieldLabel: 'Form Instructions',
            labelAlign: 'top',
            autoShow: true,
            width: '100%',
            margin: 15,
            height: 100
        },{
                name: 'formFieldConfiguration',
                xtype: 'tsformconfigsettings',
                fieldLabel: 'Form Field Configuration - Drag rows to specify order on the form',
                margin: 15,
                labelAlign: 'top',
                fields: fields
            }];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._validateSettings(settings, this.formModel);
    }
});

            
               Rally.launchApp('configurable-request-form', {
                   name: 'Configurable Request Form'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.tslabel {
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    color: #222;
    font-size: 12px;
    text-align: right;
    float: right;
    padding: 10;
}

.tsinvalid {
    color: #c30;
    font-weight: bold;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
}

.tsinstructions {
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    color: #222;
    font-size: 14px;
    padding: 10px;
}

.tstbl {
    padding: 5px;
}

.tstbl tr:nth-child(odd){
    background-color: #e6e6e6;
}
.tstbl tr:nth-child(even){
    background-color: #ffffff;
}
    </style>

</head>
<body></body>
</html>